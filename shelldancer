#!/bin/bash

# ==========================================================
# Shell Dancer Installer and Utility
# Adds support for user/pass or SSH key authentication
# ==========================================================

SCRIPT_NAME="shelldancer"
REPO_URL="https://raw.githubusercontent.com/smilexth/shelldancer/main/shelldancer"

# Function to prompt for authentication method
prompt_authentication_method() {
    echo "Choose authentication method:"
    echo "1. Username/Password"
    echo "2. SSH Key File"
    while true; do
        read -p "Enter your choice (1 or 2): " auth_choice < /dev/tty
        if [[ "$auth_choice" == "1" ]]; then
            echo "You chose Username/Password."
            read -p "Enter your username: " username < /dev/tty
            read -s -p "Enter your password: " password < /dev/tty
            echo ""
            AUTH_TYPE="userpass"
            AUTH_DETAILS=("username=$username" "password=$password")
            break
        elif [[ "$auth_choice" == "2" ]]; then
            echo "You chose SSH Key File."
            read -p "Enter the full path to your SSH key file: " key_path < /dev/tty
            if [ -f "$key_path" ]; then
                AUTH_TYPE="sshkey"
                AUTH_DETAILS=("keypath=$key_path")
                break
            else
                echo "The specified key file does not exist. Please try again."
            fi
        else
            echo "Invalid choice. Please enter 1 or 2."
        fi
    done
}

# Function to handle Port Tunnel Creation
create_port_tunnel() {
    prompt_authentication_method
    echo "Creating a Port Tunnel..."
    read -p "Enter remote host (e.g., user@host.com): " remote_host < /dev/tty
    read -p "Enter local port to forward: " local_port < /dev/tty
    read -p "Enter remote port to forward to: " remote_port < /dev/tty

    if [[ "$AUTH_TYPE" == "userpass" ]]; then
        echo "Using Username/Password for authentication..."
        autossh -M 0 -f -N -L "$local_port:localhost:$remote_port" "$remote_host"
    elif [[ "$AUTH_TYPE" == "sshkey" ]]; then
        echo "Using SSH Key File: ${AUTH_DETAILS[0]}"
        autossh -M 0 -i "${AUTH_DETAILS[0]#keypath=}" -f -N -L "$local_port:localhost:$remote_port" "$remote_host"
    fi

    echo "✅ Port tunnel created successfully."
}

# Function to handle Reverse Shell Creation
create_reverse_shell() {
    prompt_authentication_method
    echo "Creating a Reverse Shell..."
    read -p "Enter remote host (e.g., user@host.com): " remote_host < /dev/tty
    read -p "Enter remote port to bind: " remote_port < /dev/tty
    read -p "Enter local port to listen on: " local_port < /dev/tty

    if [[ "$AUTH_TYPE" == "userpass" ]]; then
        echo "Using Username/Password for authentication..."
        autossh -M 0 -f -N -R "$remote_port:localhost:$local_port" "$remote_host"
    elif [[ "$AUTH_TYPE" == "sshkey" ]]; then
        echo "Using SSH Key File: ${AUTH_DETAILS[0]}"
        autossh -M 0 -i "${AUTH_DETAILS[0]#keypath=}" -f -N -R "$remote_port:localhost:$local_port" "$remote_host"
    fi

    echo "✅ Reverse shell created successfully."
}

# Main menu
main_menu() {
    echo "==============================="
    echo "       Shell Dancer Menu       "
    echo "==============================="
    echo "1. Create Port Tunnel"
    echo "2. Create Reverse Shell"
    echo "3. Exit"
    while true; do
        read -p "Choose an option [1-3]: " choice < /dev/tty
        case "$choice" in
            1)
                create_port_tunnel
                ;;
            2)
                create_reverse_shell
                ;;
            3)
                echo "Exiting Shell Dancer. Goodbye!"
                exit 0
                ;;
            *)
                echo "Invalid option. Please choose between 1-3."
                ;;
        esac
    done
}

# Main script execution
main_menu
